(this.webpackJsonpvisual_git=this.webpackJsonpvisual_git||[]).push([[0],{73:function(t,e,i){},75:function(t,e,i){},76:function(t,e,i){"use strict";i.r(e);var r=i(0),n=i(1),a=i(19),s=i.n(a),c=i(12),o=i(20),h=i.n(o),l=(i(73),i(24)),u=i.n(l),d=i(25),m=(i(75),function(t){return Object(r.jsx)("li",{className:t.currentPage==t.title?"active":"",children:Object(r.jsx)("a",{href:t.url,children:t.title})})}),g=function(t){var e=Object(n.useState)(!1),i=Object(c.a)(e,2),a=i[0],s=i[1];return Object(r.jsxs)("div",{className:"main",children:[Object(r.jsx)("div",{className:"desktop",children:Object(r.jsxs)("ul",{children:[Object(r.jsx)(m,{title:"Home",url:"#",currentPage:t.currentPage}),Object(r.jsx)(m,{title:"About",url:"#",currentPage:t.currentPage}),Object(r.jsx)(m,{title:"Tutorial",url:"#",currentPage:t.currentPage}),Object(r.jsx)("li",{children:Object(r.jsx)("div",{className:"logo",children:Object(r.jsx)("h2",{children:"Visual Git"})})}),Object(r.jsx)(m,{title:"Commands",url:"#",currentPage:t.currentPage}),Object(r.jsx)(m,{title:"Source on GitHub",url:"#",currentPage:t.currentPage}),Object(r.jsx)(m,{title:"Share",url:"#",currentPage:t.currentPage})]})}),Object(r.jsxs)("div",{className:"mobile",children:[Object(r.jsx)("div",{className:"logo",children:Object(r.jsx)("h2",{children:"Visual Git"})}),Object(r.jsx)(d.a,{sidebar:Object(r.jsx)("div",{className:"drawerMenu",children:Object(r.jsxs)("ul",{children:[Object(r.jsx)(m,{title:"Home",url:"#",currentPage:t.currentPage}),Object(r.jsx)(m,{title:"About",url:"#",currentPage:t.currentPage}),Object(r.jsx)(m,{title:"Tutorial",url:"#",currentPage:t.currentPage}),Object(r.jsx)(m,{title:"Commands",url:"#",currentPage:t.currentPage}),Object(r.jsx)(m,{title:"Source on GitHub",url:"#",currentPage:t.currentPage}),Object(r.jsx)(m,{title:"Share",url:"#",currentPage:t.currentPage})]})}),open:a,docked:a,onSetOpen:function(){return s(!a)},styles:{sidebar:{background:"white"}},children:Object(r.jsx)("div",{style:{padding:10},children:Object(r.jsx)(u.a,{isOpen:a,menuClicked:function(){return s(!a)},width:18,height:15,strokeWidth:2,rotate:0,color:"black",borderRadius:0,animationDuration:.5})})})]})]})},b=i(29),j=i(27),f=i(28),p=function(){function t(){Object(j.a)(this,t),this.state={initializedRepo:!1,currentBranch:"main",branches:[{name:"main",head:""}],commands:[],tree:{}}}return Object(f.a)(t,[{key:"status",value:function(){if(0==this.state.initializedRepo)return"fatal: not a git repository (or any of the parent directories): .git";var t="On branch "+this.state.currentBranch+"\n";0!=this.state.commands.length&&"add"==this.state.commands[this.state.commands.length-1].command&&(t+="no changes added to commit (use git commit command) \n");var e=0;return null!=this.state.tree[this.state.currentBranch]&&this.state.tree[this.state.currentBranch].forEach((function(t){0==t.pushed&&e++})),t+=e>0?"Your branch is "+e+" commits ahead the remote origin. \n":"Your branch is up to date with the remote origin."}},{key:"checkout",value:function(t){if(0==this.state.initializedRepo)return"fatal: not a git repository (or any of the parent directories): .git";if(0==t.length)return this.listAllBranches();if("-b"==t[0]){if(t.length<2)return"fatal: branch name is not passed as parameter";var e=t[1];return-1!=this.state.branches.findIndex((function(t){return t.name==e}))?"fatal: branch already exists with the name: "+e:(this.branch([e]),this.state.currentBranch=e,"Switched to new branch "+e+"\n"+this.listAllBranches())}return-1==this.state.branches.findIndex((function(e){return e.name==t[0]}))?"fatal: branch with name "+t[0]+" doesn't exists.":(this.state.currentBranch=t[0],"switched to branch "+t[0]+"\n"+this.listAllBranches())}},{key:"listAllBranches",value:function(){var t=this,e="";return this.state.branches.forEach((function(i){i.name==t.state.currentBranch?e+=i.name+" * \n":e+=i.name+"\n"})),e}},{key:"branch",value:function(t){if(0==this.state.initializedRepo)return"fatal: not a git repository (or any of the parent directories): .git";if(0==t.length)return this.listAllBranches();if("-a"==t[0])return this.listAllBranches();if("-d"==t[0]){if(t.length<2)return"git branch -d : branch name not passed as parameter";var e=t[1];return-1==this.state.branches.findIndex((function(t){return t.name==e}))?"git error: branch with name "+e+" doesn't exists":"main"==e?"cannot delete main branch of the git repository":(this.state.currentBranch==e&&(this.state.currentBranch="main"),this.state.branches=this.state.branches.filter((function(t){return t.name!=e})),delete this.state.tree[e],"Deleted branch "+e+" from the git repository. \nHead at "+this.state.currentBranch+" branch")}e=t[0];if(-1!=this.state.branches.findIndex((function(t){return t.name==e})))return"git error: branch with name "+e+" already exists";var i=this.state.tree[this.state.currentBranch];return this.state.branches.push({name:e,head:null!=i&&i.length>0?i[i.length-1].id:""}),this.state.tree[e]=[],"created new branch "+e+"\n"+this.listAllBranches()}},{key:"commit",value:function(t){if(0==this.state.initializedRepo)return"fatal: not a git repository (or any of the parent directories): .git";if(0==t.length)return"no parameters passed to git commit";if("-am"==t[0]&&this.add(),0==this.state.commands.length||"add"!=this.state.commands[this.state.commands.length-1].command)return"no changes added to commit";if("-m"==t[0]||"-am"==t[0]){var e;t=t.slice(1);var i="";t.forEach((function(t){i+=t.replaceAll('"',"")+" "})),i.slice(0,i.length-1);var r=Math.random().toString(36).slice(2).substr(0,6),n=null!==(e=this.state.tree[this.state.currentBranch])&&void 0!==e?e:[];return this.state.tree[this.state.currentBranch]=[].concat(Object(b.a)(n),[{id:r,commit:i,pushed:!1,lastCommit:null!=n&&n.length>0?n[n.length-1].id:""}]),console.log(this.state),this.state.commands.push({command:"commit",description:"commit added"}),r+" commit added to the "+this.state.currentBranch+" branch"}return"git commit "+t[0]+": not found."}},{key:"add",value:function(){return 1==this.state.initializedRepo?(this.state.commands.push({command:"add",description:"added unstaged changes"}),"added unstaged changes"):"fatal: not a git repository (or any of the parent directories): .git"}},{key:"initRepo",value:function(){return 0==this.state.initializedRepo?(this.state.initializedRepo=!0,"Initialized empty Git repository."):"Re-initialized git repository."}},{key:"exec",value:function(t,e,i){switch(t[0]){case"init":e(this.initRepo());break;case"add":e(this.add());break;case"commit":e(this.commit(t.slice(1)));break;case"branch":e(this.branch(t.slice(1)));break;case"checkout":e(this.checkout(t.slice(1)));break;case"status":e(this.status());break;case void 0:e("Welcome to Visual Git!\nThese are common Git commands used in various situations:\n"),this.help(e);break;default:e("No such git command.")}return this.state}},{key:"help",value:function(t){t("Help command version 0.0.1\n git init : Create an empty Git repository or reinitialize an existing one \n git add : Add file contents to the index \n git commit : Record changes to the repository \n git push : Update remote refs along with associated objects \n git branch : List, create, or delete branches \n git checkout : Switch branches or restore working tree files \n git merge : Join two or more development histories together \n git status : Show the working tree status")}}]),t}(),x=function(){var t=new p,e=Object(n.useState)({}),i=Object(c.a)(e,2),a=(i[0],i[1]);return Object(r.jsxs)("div",{children:[Object(r.jsx)(g,{currentPage:"Home"}),Object(r.jsxs)("div",{className:"body",children:[Object(r.jsx)("div",{className:"terminal",children:Object(r.jsx)(h.a,{color:"white",backgroundColor:"black",hideTopBar:!0,allowTabs:!1,promptSymbol:"$",style:{fontWeight:"bold",fontSize:"1em"},commands:{git:function(e,i,r){return a(t.exec(e.slice(1),i,r))},help:function(e,i,r){t.help(i)}},descriptions:{"git init":"Create an empty Git repository or reinitialize an existing one","git add":"Add file contents to the index","git commit":"Record changes to the repository","git push":"Update remote refs along with associated objects","git branch":"List, create, or delete branches","git checkout":"Switch branches or restore working tree files","git merge":"Join two or more development histories together","git status":"Show the working tree status"},msg:"Welcome to Visual Git Console! Start by initializing a git repository."})}),Object(r.jsx)("div",{className:"visual",children:Object(r.jsx)("p",{children:"Tree"})})]})]})};s.a.render(Object(r.jsx)(x,{}),document.getElementById("root"))}},[[76,1,2]]]);
//# sourceMappingURL=main.d8b0100f.chunk.js.map