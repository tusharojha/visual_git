{"version":3,"sources":["components/Header/Header.js","components/VisualTree/VisualTree.js","commands.js","pages/Home/Home.js","index.js"],"names":["MenuItem","props","className","currentPage","title","href","url","Header","useState","mobileMenuState","setMobileMenuState","sidebar","open","docked","onSetOpen","styles","background","style","padding","isOpen","menuClicked","width","height","strokeWidth","rotate","color","borderRadius","animationDuration","VisualTree","scale","translation","x","y","state","setState","console","log","value","onChange","showControls","options","orientation","gitgraph","master","branch","commit","develop","initalized","aFeature","merge","tag","Git","initializedRepo","currentBranch","branches","name","head","merges","commands","tree","branchName","commitHistory","baseCommits","this","length","find","v","lastCommit","reverse","key","id","undefined","args","targetBranchIndex","findIndex","targetBranchCommits","baseBranchCommits","count","forEach","i","push","sort","a","b","timeStamp","target","message","command","pushed","listAllBranches","filter","add","slice","commitMessage","replaceAll","generateCode","Math","random","toString","substr","commits","Date","now","description","print","runCommand","initRepo","checkout","status","help","Home","git","backgroundColor","hideTopBar","allowTabs","promptSymbol","fontWeight","fontSize","exec","descriptions","msg","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5df34b22.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport HamburgerMenu from \"react-hamburger-menu\";\r\nimport Sidebar from \"react-sidebar\";\r\n\r\nimport \"./header.css\";\r\n\r\nconst MenuItem = (props) => {\r\n  return (\r\n    <li className={props.currentPage == props.title ? \"active\" : \"\"}>\r\n      <a href={props.url}>{props.title}</a>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst Header = (props) => {\r\n  const [mobileMenuState, setMobileMenuState] = useState(false);\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"desktop\">\r\n        <ul>\r\n          <MenuItem title=\"Home\" url=\"#\" currentPage={props.currentPage} />\r\n          <MenuItem title=\"About\" url=\"#\" currentPage={props.currentPage} />\r\n          <MenuItem title=\"Tutorial\" url=\"#\" currentPage={props.currentPage} />\r\n          <li>\r\n            <div className=\"logo\">\r\n              <h2>Visual Git</h2>\r\n            </div>\r\n          </li>\r\n          <MenuItem title=\"Commands\" url=\"#\" currentPage={props.currentPage} />\r\n          <MenuItem\r\n            title=\"Source on GitHub\"\r\n            url=\"#\"\r\n            currentPage={props.currentPage}\r\n          />\r\n          <MenuItem title=\"Share\" url=\"#\" currentPage={props.currentPage} />\r\n        </ul>\r\n      </div>\r\n      <div className=\"mobile\">\r\n        <div className=\"logo\">\r\n          <h2>Visual Git</h2>\r\n        </div>\r\n        <Sidebar\r\n          sidebar={\r\n            <div className=\"drawerMenu\">\r\n              <ul>\r\n                <MenuItem\r\n                  title=\"Home\"\r\n                  url=\"#\"\r\n                  currentPage={props.currentPage}\r\n                />\r\n                <MenuItem\r\n                  title=\"About\"\r\n                  url=\"#\"\r\n                  currentPage={props.currentPage}\r\n                />\r\n                <MenuItem\r\n                  title=\"Tutorial\"\r\n                  url=\"#\"\r\n                  currentPage={props.currentPage}\r\n                />\r\n                <MenuItem\r\n                  title=\"Commands\"\r\n                  url=\"#\"\r\n                  currentPage={props.currentPage}\r\n                />\r\n                <MenuItem\r\n                  title=\"Source on GitHub\"\r\n                  url=\"#\"\r\n                  currentPage={props.currentPage}\r\n                />\r\n                <MenuItem\r\n                  title=\"Share\"\r\n                  url=\"#\"\r\n                  currentPage={props.currentPage}\r\n                />\r\n              </ul>\r\n            </div>\r\n          }\r\n          open={mobileMenuState}\r\n          docked={mobileMenuState}\r\n          onSetOpen={() => setMobileMenuState(!mobileMenuState)}\r\n          styles={{ sidebar: { background: \"white\" } }}\r\n        >\r\n          <div style={{ padding: 10 }}>\r\n            <HamburgerMenu\r\n              isOpen={mobileMenuState}\r\n              menuClicked={() => setMobileMenuState(!mobileMenuState)}\r\n              width={18}\r\n              height={15}\r\n              strokeWidth={2}\r\n              rotate={0}\r\n              color=\"black\"\r\n              borderRadius={0}\r\n              animationDuration={0.5}\r\n            />\r\n          </div>\r\n        </Sidebar>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { Gitgraph } from \"@gitgraph/react\";\r\nimport { MapInteractionCSS } from \"react-map-interaction\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst VisualTree = (props) => {\r\n  const [state, setState] = useState({\r\n    scale: 0.6,\r\n    translation: {\r\n      x: 0,\r\n      y: 0,\r\n    },\r\n  });\r\n  console.log(props);\r\n  return (\r\n    <div>\r\n      <MapInteractionCSS\r\n        value={state}\r\n        onChange={(value) => setState(value)}\r\n        showControls={true}\r\n      >\r\n        <Gitgraph\r\n          options={{\r\n            orientation: \"horizontal\",\r\n          }}\r\n        >\r\n          {(gitgraph) => {\r\n            // Simulate git commands with Gitgraph API.\r\n            const master = gitgraph.branch(\"master\");\r\n            master.commit(\"Initial commit\");\r\n            const develop = gitgraph.branch(\"develop\");\r\n            develop.commit(\"Add TypeScript\");\r\n            if (props.initalized) {\r\n              const aFeature = gitgraph.branch(\"a-feature\");\r\n              aFeature\r\n                .commit(\"Make it work\")\r\n                .commit(\"Make it right\")\r\n                .commit(\"Make it fast\");\r\n              develop.merge(aFeature);\r\n            }\r\n            develop.commit(\"Prepare v1\");\r\n            if (state.scale < 1) master.merge(develop).tag(\"v1.0.0\");\r\n          }}\r\n        </Gitgraph>\r\n      </MapInteractionCSS>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VisualTree;\r\n","class Git {\r\n  state = {\r\n    initializedRepo: false,\r\n    currentBranch: \"main\",\r\n    branches: [{ name: \"main\", head: \"\", merges: [] }],\r\n    commands: [],\r\n    tree: {},\r\n  };\r\n\r\n  commitHistory(branchName) {\r\n    var commitHistory = [];\r\n    var baseCommits = this.state.tree[branchName];\r\n    var head = \"\";\r\n    if (baseCommits.length == 0) {\r\n      head = this.state.branches.find((v) => v.name == branchName).head;\r\n    } else {\r\n      head = baseCommits[0].lastCommit;\r\n      commitHistory = baseCommits.reverse();\r\n    }\r\n    while (head != \"\") {\r\n      // find the commit from the tree and add to commitHistory and set the new head\r\n      for (var key in this.state.tree) {\r\n        const value = this.state.tree[key];\r\n        var lastCommit = value.find((v) => v.id == head);\r\n        if (lastCommit != undefined) {\r\n          commitHistory = [...commitHistory, lastCommit];\r\n          head = lastCommit.lastCommit;\r\n        }\r\n      }\r\n    }\r\n    return commitHistory.reverse();\r\n  }\r\n\r\n  merge(args) {\r\n    if (this.state.initializedRepo == false)\r\n      return \"fatal: not a git repository (or any of the parent directories): .git\";\r\n    if (args.length < 1) return \"fatal: branch name is not passed as parameter\";\r\n    var branchName = args[0];\r\n    var targetBranchIndex = this.state.branches.findIndex(\r\n      (v) => v.name == branchName\r\n    );\r\n    if (targetBranchIndex == -1)\r\n      return \"git error: branch with name \" + branchName + \" doesn't exists\";\r\n    // get the all the commit history\r\n    var targetBranchCommits = this.commitHistory(branchName);\r\n    var baseBranchCommits = this.commitHistory(this.state.currentBranch);\r\n    var count = 0;\r\n    targetBranchCommits.forEach((i) => {\r\n      if (baseBranchCommits.find((v) => v.id == i.id) == undefined) {\r\n        count++;\r\n        baseBranchCommits.push(i);\r\n      }\r\n    });\r\n    if (count == 0)\r\n      return (\r\n        \"git: no commits to merge from \" +\r\n        branchName +\r\n        \".\\nBranch is already up to date.\"\r\n      );\r\n    this.state.tree[this.state.currentBranch] = baseBranchCommits.sort(\r\n      (a, b) => a.timeStamp - b.timeStamp\r\n    );\r\n    this.state.branches[targetBranchIndex].merges.push({\r\n      target: this.state.currentBranch,\r\n      id: targetBranchCommits[targetBranchCommits.length - 1].id,\r\n    });\r\n    return (\r\n      \"Merged branch \" +\r\n      branchName +\r\n      \" to \" +\r\n      this.state.currentBranch +\r\n      \".\\n\" +\r\n      count +\r\n      \" commits pushed successfully.\"\r\n    );\r\n  }\r\n\r\n  status() {\r\n    console.log(this.state);\r\n    if (this.state.initializedRepo == false)\r\n      return \"fatal: not a git repository (or any of the parent directories): .git\";\r\n    var message = \"On branch \" + this.state.currentBranch + \"\\n\";\r\n    if (\r\n      this.state.commands.length != 0 &&\r\n      this.state.commands[this.state.commands.length - 1].command == \"add\"\r\n    ) {\r\n      message += \"no changes added to commit (use git commit command) \\n\";\r\n    }\r\n    var count = 0;\r\n    if (this.state.tree[this.state.currentBranch] != null)\r\n      this.state.tree[this.state.currentBranch].forEach((i) => {\r\n        if (i.pushed == false) count++;\r\n      });\r\n    message +=\r\n      count > 0\r\n        ? \"Your branch is \" + count + \" commits ahead the remote origin. \\n\"\r\n        : \"Your branch is up to date with the remote origin.\";\r\n    return message;\r\n  }\r\n\r\n  checkout(args) {\r\n    if (this.state.initializedRepo == false)\r\n      return \"fatal: not a git repository (or any of the parent directories): .git\";\r\n    if (args.length == 0) return this.listAllBranches();\r\n    if (args[0] == \"-b\") {\r\n      if (args.length < 2)\r\n        return \"fatal: branch name is not passed as parameter\";\r\n      var branchName = args[1];\r\n      if (this.state.branches.findIndex((v) => v.name == branchName) != -1)\r\n        return \"fatal: branch already exists with the name: \" + branchName;\r\n      this.branch([branchName]);\r\n      this.state.currentBranch = branchName;\r\n      return (\r\n        \"Switched to new branch \" + branchName + \"\\n\" + this.listAllBranches()\r\n      );\r\n    }\r\n    if (this.state.branches.findIndex((v) => v.name == args[0]) == -1)\r\n      return \"fatal: branch with name \" + args[0] + \" doesn't exists.\";\r\n    this.state.currentBranch = args[0];\r\n    return \"switched to branch \" + args[0] + \"\\n\" + this.listAllBranches();\r\n  }\r\n\r\n  listAllBranches() {\r\n    var message = \"\";\r\n    this.state.branches.forEach((i) => {\r\n      if (i.name == this.state.currentBranch) {\r\n        message += i.name + \" * \\n\";\r\n      } else {\r\n        message += i.name + \"\\n\";\r\n      }\r\n    });\r\n    return message;\r\n  }\r\n\r\n  branch(args) {\r\n    if (this.state.initializedRepo == false)\r\n      return \"fatal: not a git repository (or any of the parent directories): .git\";\r\n    if (args.length == 0) return this.listAllBranches();\r\n    if (args[0] == \"-a\") return this.listAllBranches();\r\n    if (args[0] == \"-d\") {\r\n      if (args.length < 2)\r\n        return \"git branch -d : branch name not passed as parameter\";\r\n      var branchName = args[1];\r\n      if (this.state.branches.findIndex((i) => i.name == branchName) == -1)\r\n        return \"git error: branch with name \" + branchName + \" doesn't exists\";\r\n      if (branchName == \"main\")\r\n        return \"cannot delete main branch of the git repository\";\r\n      else if (this.state.currentBranch == branchName)\r\n        this.state.currentBranch = \"main\";\r\n      this.state.branches = this.state.branches.filter(\r\n        (v) => v.name != branchName\r\n      );\r\n      delete this.state.tree[branchName];\r\n      return (\r\n        \"Deleted branch \" +\r\n        branchName +\r\n        \" from the git repository. \\nHead at \" +\r\n        this.state.currentBranch +\r\n        \" branch\"\r\n      );\r\n    }\r\n    var branchName = args[0];\r\n    if (this.state.branches.findIndex((i) => i.name == branchName) != -1)\r\n      return \"git error: branch with name \" + branchName + \" already exists\";\r\n    var currentBranch = this.state.tree[this.state.currentBranch];\r\n    this.state.branches.push({\r\n      name: branchName,\r\n      head:\r\n        currentBranch != null\r\n          ? currentBranch.length > 0\r\n            ? currentBranch[currentBranch.length - 1].id\r\n            : \"\"\r\n          : \"\",\r\n      merges: [],\r\n    });\r\n    this.state.tree[branchName] = [];\r\n    return \"created new branch \" + branchName + \"\\n\" + this.listAllBranches();\r\n  }\r\n\r\n  commit(args) {\r\n    if (this.state.initializedRepo == false)\r\n      return \"fatal: not a git repository (or any of the parent directories): .git\";\r\n    if (args.length == 0) return \"no parameters passed to git commit\";\r\n    if (args[0] == \"-am\") this.add();\r\n    if (\r\n      this.state.commands.length == 0 ||\r\n      this.state.commands[this.state.commands.length - 1].command != \"add\"\r\n    )\r\n      return \"no changes added to commit\";\r\n    if (args[0] == \"-m\" || args[0] == \"-am\") {\r\n      args = args.slice(1);\r\n      var commitMessage = \"\";\r\n      args.forEach((i) => {\r\n        commitMessage += i.replaceAll('\"', \"\") + \" \";\r\n      });\r\n      commitMessage.slice(0, commitMessage.length - 1);\r\n      var generateCode = Math.random().toString(36).slice(2).substr(0, 7);\r\n      var commits = this.state.tree[this.state.currentBranch] ?? [];\r\n      this.state.tree[this.state.currentBranch] = [\r\n        ...commits,\r\n        {\r\n          id: generateCode,\r\n          commit: commitMessage,\r\n          pushed: false,\r\n          timeStamp: Date.now(),\r\n          lastCommit:\r\n            commits != null\r\n              ? commits.length > 0\r\n                ? commits[commits.length - 1].id\r\n                : this.state.branches.find(\r\n                    (v) => v.name == this.state.currentBranch\r\n                  ).head\r\n              : \"\",\r\n        },\r\n      ];\r\n      this.state.commands.push({\r\n        command: \"commit\",\r\n        description: \"commit added\",\r\n      });\r\n      return (\r\n        generateCode +\r\n        \" commit added to the \" +\r\n        this.state.currentBranch +\r\n        \" branch\"\r\n      );\r\n    } else {\r\n      return \"git commit \" + args[0] + \": not found.\";\r\n    }\r\n  }\r\n\r\n  add() {\r\n    if (this.state.initializedRepo == true) {\r\n      this.state.commands.push({\r\n        command: \"add\",\r\n        description: \"added unstaged changes\",\r\n      });\r\n      return \"added unstaged changes\";\r\n    }\r\n    return \"fatal: not a git repository (or any of the parent directories): .git\";\r\n  }\r\n\r\n  initRepo() {\r\n    if (this.state.initializedRepo == false) {\r\n      this.state.initializedRepo = true;\r\n      return \"Initialized empty Git repository.\";\r\n    } else {\r\n      return \"Re-initialized git repository.\";\r\n    }\r\n  }\r\n\r\n  exec(args, print, runCommand) {\r\n    const command = args[0];\r\n    switch (command) {\r\n      case \"init\":\r\n        print(this.initRepo());\r\n        break;\r\n      case \"add\":\r\n        print(this.add());\r\n        break;\r\n      case \"commit\":\r\n        print(this.commit(args.slice(1)));\r\n        break;\r\n      case \"branch\":\r\n        print(this.branch(args.slice(1)));\r\n        break;\r\n      case \"checkout\":\r\n        print(this.checkout(args.slice(1)));\r\n        break;\r\n      case \"status\":\r\n        print(this.status());\r\n        break;\r\n      case \"merge\":\r\n        print(this.merge(args.slice(1)));\r\n        break;\r\n      case undefined:\r\n        print(\r\n          \"Welcome to Visual Git!\\nThese are common Git commands used in various situations:\\n\"\r\n        );\r\n        this.help(print);\r\n        break;\r\n      default:\r\n        print(\"No such git command.\");\r\n    }\r\n    return this.state;\r\n  }\r\n\r\n  help(print) {\r\n    print(\r\n      \"Help command version 0.0.1\\n git init : Create an empty Git repository or reinitialize an existing one \\n git add : Add file contents to the index \\n git commit : Record changes to the repository \\n git push : Update remote refs along with associated objects \\n git branch : List, create, or delete branches \\n git checkout : Switch branches or restore working tree files \\n git merge : Join two or more development histories together \\n git status : Show the working tree status\"\r\n    );\r\n  }\r\n}\r\n\r\nexport default Git;\r\n","import React, { useState } from \"react\";\r\nimport Terminal from \"terminal-in-react\";\r\n\r\nimport \"./home.css\";\r\nimport Header from \"../../components/Header/Header\";\r\nimport VisualTree from \"../../components/VisualTree/VisualTree\";\r\nimport Git from \"../../commands\";\r\n\r\nconst Home = () => {\r\n  var git = new Git();\r\n  const [state, setState] = useState({});\r\n  console.log(state);\r\n  return (\r\n    <div>\r\n      <Header currentPage=\"Home\" />\r\n      <div className=\"body\">\r\n        <div className=\"terminal\">\r\n          <Terminal\r\n            color=\"white\"\r\n            backgroundColor=\"black\"\r\n            hideTopBar={true}\r\n            allowTabs={false}\r\n            promptSymbol=\"$\"\r\n            style={{ fontWeight: \"bold\", fontSize: \"1em\" }}\r\n            commands={{\r\n              git: (args, print, runCommand) =>\r\n                setState(git.exec(args.slice(1), print, runCommand)),\r\n              help: (args, print, runCommand) => {\r\n                git.help(print);\r\n              },\r\n            }}\r\n            descriptions={{\r\n              \"git init\":\r\n                \"Create an empty Git repository or reinitialize an existing one\",\r\n              \"git add\": \"Add file contents to the index\",\r\n              \"git commit\": \"Record changes to the repository\",\r\n              \"git push\": \"Update remote refs along with associated objects\",\r\n              \"git branch\": \"List, create, or delete branches\",\r\n              \"git checkout\": \"Switch branches or restore working tree files\",\r\n              \"git merge\": \"Join two or more development histories together\",\r\n              \"git status\": \"Show the working tree status\",\r\n            }}\r\n            msg=\"Welcome to Visual Git Console! Start by initializing a git repository.\"\r\n          />\r\n        </div>\r\n        <div className=\"visual\">\r\n          <VisualTree initalized={state.initializedRepo ?? false} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport Home from \"./pages/Home/Home\";\r\n\r\nReactDOM.render(<Home />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}