(this.webpackJsonpvisual_git=this.webpackJsonpvisual_git||[]).push([[0],{70:function(e,t,i){},72:function(e,t,i){},73:function(e,t,i){"use strict";i.r(t);var r=i(0),n=i(1),a=i(17),c=i.n(a),s=i(10),o=i(18),d=i.n(o),l=(i(70),i(22)),u=i.n(l),h=i(23),m=(i(72),function(e){return Object(r.jsx)("li",{className:e.currentPage==e.title?"active":"",children:Object(r.jsx)("a",{href:e.url,children:e.title})})}),g=function(e){var t=Object(n.useState)(!1),i=Object(s.a)(t,2),a=i[0],c=i[1];return Object(r.jsxs)("div",{className:"main",children:[Object(r.jsx)("div",{className:"desktop",children:Object(r.jsxs)("ul",{children:[Object(r.jsx)(m,{title:"Home",url:"#",currentPage:e.currentPage}),Object(r.jsx)(m,{title:"About",url:"#",currentPage:e.currentPage}),Object(r.jsx)(m,{title:"Tutorial",url:"#",currentPage:e.currentPage}),Object(r.jsx)("li",{children:Object(r.jsx)("div",{className:"logo",children:Object(r.jsx)("h2",{children:"Visual Git"})})}),Object(r.jsx)(m,{title:"Commands",url:"#",currentPage:e.currentPage}),Object(r.jsx)(m,{title:"Source on GitHub",url:"#",currentPage:e.currentPage}),Object(r.jsx)(m,{title:"Share",url:"#",currentPage:e.currentPage})]})}),Object(r.jsxs)("div",{className:"mobile",children:[Object(r.jsx)("div",{className:"logo",children:Object(r.jsx)("h2",{children:"Visual Git"})}),Object(r.jsx)(h.a,{sidebar:Object(r.jsx)("div",{className:"drawerMenu",children:Object(r.jsxs)("ul",{children:[Object(r.jsx)(m,{title:"Home",url:"#",currentPage:e.currentPage}),Object(r.jsx)(m,{title:"About",url:"#",currentPage:e.currentPage}),Object(r.jsx)(m,{title:"Tutorial",url:"#",currentPage:e.currentPage}),Object(r.jsx)(m,{title:"Commands",url:"#",currentPage:e.currentPage}),Object(r.jsx)(m,{title:"Source on GitHub",url:"#",currentPage:e.currentPage}),Object(r.jsx)(m,{title:"Share",url:"#",currentPage:e.currentPage})]})}),open:a,docked:a,onSetOpen:function(){return c(!a)},styles:{sidebar:{background:"white"}},children:Object(r.jsx)("div",{style:{padding:10},children:Object(r.jsx)(u.a,{isOpen:a,menuClicked:function(){return c(!a)},width:18,height:15,strokeWidth:2,rotate:0,color:"black",borderRadius:0,animationDuration:.5})})})]})]})},j=i(25),b=i(26),p=function(){function e(){Object(j.a)(this,e),this.state={initializedRepo:!1,currentBranch:"main",commands:[],tree:{}}}return Object(b.a)(e,[{key:"commit",value:function(e){if(0==this.state.initializedRepo)return"fatal: not a git repository (or any of the parent directories): .git";if(0==e.length)return"no parameters passed to git commit";if("--am"==e[0]&&this.add(),0==this.state.commands.length||"add"!=this.state.commands[this.state.commands.length-1].command)return"no changes added to commit";if("-m"==e[0]||"-am"==e[0]){e=e.slice(1);var t="";e.forEach((function(e){t+=e.replaceAll('"',"")+" "})),t.slice(0,t.length-1);var i=Math.random().toString(36).slice(2).substr(0,6);return this.state.tree[this.state.currentBranch]={id:i,commit:t},this.state.commands.push({command:"commit",description:"commit added"}),i+" commit added to the "+this.state.currentBranch+" branch"}return"git commit "+e[0]+": not found."}},{key:"add",value:function(){return 1==this.state.initializedRepo?(this.state.commands.push({command:"add",description:"added unstaged changes"}),"added unstaged changes"):"fatal: not a git repository (or any of the parent directories): .git"}},{key:"initRepo",value:function(){return 0==this.state.initializedRepo?(this.state.initializedRepo=!0,"Initialized empty Git repository."):"Re-initialized git repository."}},{key:"exec",value:function(e,t,i){switch(e[0]){case"init":t(this.initRepo());break;case"add":t(this.add());break;case"commit":t(this.commit(e.slice(1)));break;default:t("No such git command.")}return this.state}},{key:"help",value:function(e){e("Help command version 0.0.1\n git init : Create an empty Git repository or reinitialize an existing one \n git add : Add file contents to the index \n git commit : Record changes to the repository \n git push : Update remote refs along with associated objects \n git branch : List, create, or delete branches \n git checkout : Switch branches or restore working tree files \n git merge : Join two or more development histories together \n git status : Show the working tree status")}}]),e}(),O=function(){var e=new p,t=Object(n.useState)({}),i=Object(s.a)(t,2),a=(i[0],i[1]);return Object(r.jsxs)("div",{children:[Object(r.jsx)(g,{currentPage:"Home"}),Object(r.jsxs)("div",{className:"body",children:[Object(r.jsx)("div",{className:"terminal",children:Object(r.jsx)(d.a,{color:"white",backgroundColor:"black",hideTopBar:!0,allowTabs:!1,style:{fontWeight:"bold",fontSize:"1em"},commands:{git:function(t,i,r){return a(e.exec(t.slice(1),i,r))},help:function(t,i,r){e.help(i)}},descriptions:{"git init":"Create an empty Git repository or reinitialize an existing one","git add":"Add file contents to the index","git commit":"Record changes to the repository","git push":"Update remote refs along with associated objects","git branch":"List, create, or delete branches","git checkout":"Switch branches or restore working tree files","git merge":"Join two or more development histories together","git status":"Show the working tree status"},msg:"Welcome to Git Console! Start by initializing a git repository."})}),Object(r.jsx)("div",{className:"visual",children:Object(r.jsx)("p",{children:"Tree"})})]})]})};c.a.render(Object(r.jsx)(O,{}),document.getElementById("root"))}},[[73,1,2]]]);
//# sourceMappingURL=main.fc9fc45a.chunk.js.map